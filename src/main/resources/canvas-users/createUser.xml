<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.
~
~  WSO2 Inc. uniqueIds this file to you under the Apache uniqueId,
~  Version 2.0 (the "uniqueId"); you may not use this file except
~  in compliance with the uniqueId.
~  You may obtain a copy of the uniqueId at
~
~   http://www.apache.org/uniqueIds/uniqueId-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the uniqueId is distributed on an
~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the uniqueId for the
~  specific language governing permissions and limitations
~  under the uniqueId.
-->
<template name="createUser" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="accountId"
               description="The account id."/>
    <parameter name="userName"
               description="The user name."/>
    <parameter name="communicationAddress" description="The communication channel address."/>
    <parameter name="communicationConfirmationUrl"
               description="Only valid for account admins. If true, returns the new user account confirmation URL in the
                response."/>
    <parameter name="shortName"
               description="User's name as it will be displayed in discussions, messages, and comments."/>
    <parameter name="uniqueId"
               description="User's login ID. If this is a self-registration, it must be a valid email address."/>
    <parameter name="sendConfirmation" description="Send user notification of account creation if true.
     Automatically set to true during self-registration."/>
    <parameter name="sortableName" description="User's name as used to sort alphabetically in lists."/>
    <parameter name="timeZone"
               description="The time zone for the user."/>
    <parameter name="communicationType"
               description="The communication channel type."/>
    <parameter name="communicationSkipConfirmation"
               description="Only valid for site admins and account admins making requests; If true, the channel is
               automatically validated and no confirmation email or SMS is sent."/>
    <parameter name="termsOfUse" description="Whether the user accepts the terms of use."/>
    <parameter name="sisUserId" description="SIS ID for the user's account."/>

    <sequence>
        <property name="uri.var.accountId" expression="$func:accountId"/>
        <property name="uri.var.userName" expression="$func:userName"/>
        <property name="uri.var.communicationAddress" expression="$func:communicationAddress"/>
        <property name="uri.var.communicationConfirmationUrl" expression="$func:communicationConfirmationUrl"/>
        <property name="uri.var.shortName" expression="$func:shortName"/>
        <property name="uri.var.uniqueId" expression="$func:uniqueId"/>
        <property name="uri.var.sendConfirmation" expression="$func:sendConfirmation"/>
        <property name="uri.var.sortableName" expression="$func:sortableName"/>
        <property name="uri.var.timeZone" expression="$func:timeZone"/>
        <property name="uri.var.communicationType" expression="$func:communicationType"/>
        <property name="uri.var.communicationSkipConfirmation" expression="$func:communicationSkipConfirmation"/>
        <property name="uri.var.termsOfUse" expression="$func:termsOfUse"/>
        <property name="uri.var.sisUserId" expression="$func:sisUserId"/>
        <script language="js">
            <![CDATA[
                var jsonPayload = new Object();
                var timeZone = mc.getProperty('uri.var.timeZone');
                var communicationType = mc.getProperty('uri.var.communicationType');
                var communicationSkipConfirmation = mc.getProperty('uri.var.communicationSkipConfirmation');
                var termsOfUse = mc.getProperty('uri.var.termsOfUse');
                var sortableName = mc.getProperty('uri.var.sortableName');
                var uniqueId = mc.getProperty('uri.var.uniqueId');
                var userName = mc.getProperty('uri.var.userName');
                var communicationAddress = mc.getProperty('uri.var.communicationAddress');
                var communicationConfirmationUrl = mc.getProperty('uri.var.communicationConfirmationUrl');
                var shortName = mc.getProperty('uri.var.shortName');
                var sendConfirmation = mc.getProperty('uri.var.sendConfirmation');
                var sisUserId = mc.getProperty('uri.var.sisUserId');

                if (sisUserId != null && sisUserId != ""){
                    jsonPayload["pseudonym[sis_user_id]"] = sisUserId;
                }
                
                if (communicationType != null && communicationType != ""){
                    jsonPayload["communication_channel[type]"] = communicationType;
                }
                
                if (communicationSkipConfirmation != null && communicationSkipConfirmation != ""){
                    jsonPayload["communication_channel[skip_confirmation]"] = communicationSkipConfirmation;
                }
                
                if (termsOfUse != null && termsOfUse != ""){
                    jsonPayload["user[terms_of_use]"] = termsOfUse;
                }
                
                if (userName != null && userName != ""){
                    jsonPayload["user[name]"] = userName;
                }
                
                if (communicationAddress != null && communicationAddress != ""){
                    jsonPayload["communication_channel[address]"] = communicationAddress;
                }
                
                if (communicationConfirmationUrl != null && communicationConfirmationUrl != ""){
                    jsonPayload["communication_channel[confirmation_url]"] = communicationConfirmationUrl;
                }
                
                if (shortName != null && shortName != ""){
                    jsonPayload["user[short_name]"] = shortName;
                }
                
                if (uniqueId != null && uniqueId != ""){
                    jsonPayload["pseudonym[unique_id]"] = uniqueId;
                }

                if (sortableName != null && sortableName != ""){
                    jsonPayload["user[sortable_name]"] = sortableName;
                }
                
                if (sendConfirmation != null && sendConfirmation != ""){
                    jsonPayload["pseudonym[send_confirmation]"] = sendConfirmation;
                }

                mc.setPayloadJSON(jsonPayload);
            ]]>
        </script>
        <property name="messageType" value="application/x-www-form-urlencoded" scope="axis2"/>
        <property name="FORCE_POST_PUT_NOBODY" value="true" scope="axis2" type="BOOLEAN"/>
        <call>
            <endpoint>
                <http method="post"
                      uri-template="{uri.var.apiUrl}/accounts/{+uri.var.accountId}/users"/>
            </endpoint>
        </call>
        <!-- Remove custom Headers from the API Response -->
        <header name="ETag" action="remove" scope="transport"/>
        <header name="P3P" action="remove" scope="transport"/>
        <header name="X-Canvas-Meta" action="remove" scope="transport"/>
        <header name="X-Canvas-User-Id" action="remove" scope="transport"/>
        <header name="X-Frame-Options" action="remove" scope="transport"/>
        <header name="X-Rack-Cache" action="remove" scope="transport"/>
        <header name="X-Request-Context-Id" action="remove" scope="transport"/>
        <header name="X-Runtime" action="remove" scope="transport"/>
        <header name="X-Session-Id" action="remove" scope="transport"/>
        <header name="X-UA-Compatible" action="remove" scope="transport"/>
        <header name="Via" action="remove" scope="transport"/>
        <header name="WWW-Authenticate" action="remove" scope="transport"/>
    </sequence>
</template>
